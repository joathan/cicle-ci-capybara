# Ruby CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/ruby/ for more details
#
version: 2


# orbs:
#   ruby: circleci/ruby@0.1.2 # Ruby orb registry: https://circleci.com/orbs/registry/orb/circleci/ruby

jobs:
  build:
    docker:
      - image: circleci/ruby:2.6.4-node-browsers
      - image: postgres:9.6.9
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: posts_generator_test
    steps:
      - checkout
      # - run: echo "A first hello"
      - run: touch ~/.gemrc
      # - run:
      #     name: Which bundler?
      #     command: bundle -v
      # - run: bundle install
      - run:
          name: No install doc gems
          command: |
            echo "echo "gem: --no-ri --no-rdoc"" # >> ~/.gemrc
      - run:
          name: Bundle Setup üõ†
          command: 'bundle check --path=vendor/bundle || bundle install --path=vendor/bundle
          --jobs=4 --retry=3 --deployment --without development'
      - run:
          name: "node version"
          command: |
            node -v
      - run:
          name: yarn version
          command: |
            yarn -v
      - run:
          name: Node Setup üõ†
          command: |
            yarn install
      - run:
          name: Database Setup üé≤
          # running `bundle exec rake db:create db:schema:load --trace` is faster
          # but it doesnt guarantee that all the migration files are correct
          # this avoids tests passing if the schema is correct but the migrations are wrong
          command: |
            dockerize -wait tcp://localhost:5432 -timeout 1m
            sudo apt install -y postgresql-client
            bundle exec rake db:create db:migrate --trace
          environment:
            RAILS_ENV: test
            RACK_ENV: test
      - run:
          name: Running Tests üèÉ
          command: |
            TESTFILES=$(circleci tests glob "spec/{acceptance,controllers,drops,features,helpers,javascript,listeners,mail_interceptors,mailers,models,serializers,services,workers,lib}/**/*.rb" | circleci tests split --split-by=timings)
            echo ${TESTFILES}
            bundle exec rspec --profile --format progress --format RspecJunitFormatter --out $CIRCLE_TEST_REPORTS/rspec.xml -- ${TESTFILES}

# What to do next? Set up a test job. Please see
# https://circleci.com/docs/2.0/configuration-reference/, for more  info on how to get started.
